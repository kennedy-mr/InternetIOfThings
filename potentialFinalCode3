#include <Bridge.h>
#include <Wire.h>
#include "rgb_lcd.h"
#include <Process.h>
//weather
#include <HttpClient.h> //for the email

rgb_lcd lcd;	//LCD PORT 12c
#define button 4  	//d4
#define button_1 5  	//d5
#define BUZZER 6  //d6
	
#define LED 7 


//weather
const char* apiKey="7ecbb0c17a028641084777254799ed61";
const char* city="Sligo,IE";

int colorR = 255, colorG = 255, colorB = 255;

int j = 1; //for the email

int alarm_clock_time_hours = 7;
int alarm_clock_time_minutes = 23;
int time_hours = 7; 
int time_minutes = 22; 
int button_state = 0;  
int button_1_state = 0;
int k=0;
int last_button_state = 0;  // To store the previous button state
int last_button_1_state = 0;


void setup() 
{
  // Set up the LCD's number of columns and rows:
  lcd.begin(16, 2);
  lcd.setRGB(colorR, colorG, colorB);

Serial.begin(9600);    
  while (!Serial);      

  Bridge.begin();

  //weather    

 
  
  // Set up the buzzer pin:
  pinMode(BUZZER, OUTPUT);

  // Set the button pin as input:
  pinMode(button, INPUT);
  pinMode(button_1, INPUT);
  pinMode(LED,OUTPUT);    //Sets the pinMode to Output 

while (!Serial);

  Serial.println("Wifi Connected");
}

 
void loop() 
{

//weather
  Serial.println("\nFetching Weather Data...");
//alarm clock
  

displayTime();
alarmClock(); 
    delay(4500);

getWeatherData();
delay(4500);  // Update every second

if (j<2){
HttpClient client;

client.get("http://api.pushingbox.com/pushingbox?devid=v3E1BB495722F8E0");

while (client.available()) {
    char c = client.read();
    Serial.print(c);
  }
  Serial.flush();
  j++;

  }

  delay(5000);
     
}

void getWeatherData()
{
  lcd.clear();
  Process p;
  String apiUrl="http://api.openweathermap.org/data/2.5/weather?q=" ;
  apiUrl+= city;
  apiUrl+= "&APPID=";
  apiUrl+= apiKey;
  apiUrl+= "&units=metric";

  Serial.print("Requesting URL:");
  Serial.println(apiUrl);

  p.runShellCommand("curl -s\""+apiUrl+"\"");
   //run
   p.begin("curl");
  p.addParameter("-s");
  p.addParameter(apiUrl);

  p.run();
  String weatherData="";

  while (p.available())
  {
    char c=p.read();
    weatherData+=c;
  }

  Serial.println("\nRaw API Response:");
  Serial.println(weatherData);
 

  String extractedCity = extractValue(weatherData, "\"name\":\"","\"");
  String extractedTemp = extractValue(weatherData, "\"temp\":",",");

  Serial.print("City:");
  Serial.println(extractedCity);

  Serial.print("Temperature:");
  Serial.print(extractedTemp);
  Serial.println("C");

  lcd.print(" ");
  lcd.print(extractedCity);

 lcd.print(" ");
 lcd.print(extractedTemp);
 lcd.print("C");


}

void displayTime(){
// Display the time on the LCD in HH:MM format:
  lcd.setCursor(0, 1);
  lcd.print("Time: ");  
  if (time_hours < 10) { // Add leading zero for single-digit hours
    lcd.print("0");
  }
  lcd.print(time_hours);  
  lcd.print(":");
  if (time_minutes < 10) { // Add leading zero for single-digit minutes
    lcd.print("0");
  }
  lcd.print(time_minutes);

  // Wait for 1 second before updating the time:
  delay(1000);
  //if ((alarm_clock_time_hours == time_hours) && (alarm_clock_time_minutes-30 == time_minutes)&&k==0) 
   if (button_1_state == HIGH && last_button_1_state == LOW) // Detecting button press
  {
    alarm_clock_time_minutes=alarm_clock_time_minutes+1;
    digitalWrite(LED, HIGH); //Sets the voltage to high
  }
  last_button_1_state = button_1_state;

  // Increment the time:
  k++;
  if (k == 60) 
  {
    time_minutes++;
    k = 0;
  }

  if (time_minutes == 60) 
  {
    time_hours++;
    time_minutes = 0;
  }

  // Wrap the time back to 1:00 if it exceeds 12:59:
  if (time_hours == 24) 
  {
    time_hours = 0;
    time_minutes = 0;
  }

}

void alarmClock(){
  // Read the button state:
  button_state = digitalRead(button);
  button_1_state = digitalRead(button_1);

 
  // Check if alarm time matches the current time
    if ((alarm_clock_time_hours == time_hours) && (alarm_clock_time_minutes == time_minutes)) //could we take out seconds to see if that changes anything
    {
        unsigned long startTime = millis(); 
        tone(BUZZER, 1500);        // Play the alarm tone

    // Stop the buzzer when button is pressed
    while( !(button_state == HIGH && last_button_state == LOW)) {
       button_state = digitalRead(button);
      if (button_state == HIGH && last_button_state == LOW){
            break;
        }
       delay(50);  
       last_button_state = button_state;
   }

noTone(BUZZER);
    digitalWrite(LED, LOW);  //Sets the voltage to low
    }


  // Update last button state:
  last_button_state = button_state;


  if (button_1_state == HIGH && last_button_1_state == LOW) // Detecting button press
  {
    
    if (time_minutes == 60)
    {
      time_hours= time_hours + 1;
      time_minutes = 0;
        if (time_hours == 24) {
                  time_hours = 0;
            }




    digitalWrite(LED, HIGH); //Sets the voltage to high
  }

  last_button_1_state = button_1_state;

  }
